syntax = "proto3";

package workscheduler;

import "google/protobuf/timestamp.proto";

option go_package = "tidepool.org/workscheduler/workscheduler";

// Interface exported by the work server
service WorkScheduler {

  // Retrieve work to be performed
  rpc Poll(None) returns (Work) {}

  // confirm that work scheduler is alive
  rpc Ping(None) returns (None) {}

  // report to work scheduler that a work item failed
  rpc Failed(WorkSource) returns (None) {}

  // report to work scheduler that a work item is completed
  rpc Complete(WorkSource) returns (WorkOutput) {}

  // cause work scheduler to exit
  rpc Quit(None) returns (None) {}

  // cause work scheduler to stop providing work
  rpc Stop(None) returns (None) {}

  rpc Lag(None) returns (LagResponse) {}
}

message None {
}

// Work - a description of the work item to process
message Work {
 
  // describes the source of the work.
  WorkSource source = 1;

   // describes the work to perform. 
  bytes data = 2;     

  // describes directions on how to perform the work
  bytes directions = 3; 

  // describes if the work *may* have been attempted before
  bool reattempt = 4;
}

message WorkSource {
  // describes the source of the work.  May encode the kafka topic and partition and offset.
  string source = 1;
}

// LagResponse - how much the work scheduler is lagging
message LagResponse {
  // the timestamp of the oldest message not yet processed
  google.protobuf.Timestamp my_field = 1;
}

message WorkOutput {
  KafkaOutput id = 1;
}

message KafkaOutput {
  repeated KafkaTopicMessages kafkaTopicMessages = 1;
}

message KafkaTopicMessages {
  string topicName = 1;
  repeated KafkaPartitionMessages partitionMessages = 2;
}

message KafkaPartitionMessages {
  int32 partition = 1;
  repeated KafkaMessage messages = 2;
}

message KafkaMessage {
  bytes data = 1;
}
